apply plugin: 'org.jetbrains.kotlin.multiplatform'

apply plugin: 'kotlinx-serialization'

apply plugin: 'com.squareup.sqldelight'

apply plugin: 'com.android.library'

// It is necessay because we need to have access to context on CommonCode to use SQLDelight database
android {
    compileSdkVersion 29
    defaultConfig {
        minSdkVersion 18
        targetSdkVersion 29
        versionCode 1
        versionName '1.0'
    }
    buildTypes {
        release {
            minifyEnabled false
        }
    }

    // By default the android gradle plugin expects to find the kotlin source files in
    // the folder `main` and the test in the folder `test`. This is to be able place
    // the source code files inside androidMain and androidTest folders
    sourceSets {
        main {
            manifest.srcFile 'src/androidMain/AndroidManifest.xml'
            java.srcDirs = ['src/androidMain/kotlin']
            res.srcDirs = ['src/androidMain/res']
        }
        test {
            java.srcDirs = ['src/androidTest/kotlin']
            res.srcDirs = ['src/androidTest/res']
        }
    }
}

kotlin {
    targets {
        jvm()

        // iPhone simulator    : presets.iosX64
        // real iDevice 32 bit : presets.iosArm32
        // real iDevice 64 bit : presets.iosArm64
        def iosPreset = presets.iosX64

        fromPreset(iosPreset, 'ios') {
            binaries {
                framework {
                    // Disable bitcode embedding for the simulator build.
                    if (iosPreset == presets.iosX64) {
                        embedBitcode("disable")
                    }
                }
            }
            //compilations.main.outputKinds('FRAMEWORK')
            compilations.each {
                it.extraOpts("-linkerOpts", "-lsqlite3")
            }
        }

        fromPreset(presets.android, 'android')

    }

    sourceSets {
        commonMain.dependencies {
            implementation 'org.jetbrains.kotlin:kotlin-stdlib-common'

            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-common:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-common:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-core:$ktor_version"

        }

        androidMain.dependencies {
            //api 'org.jetbrains.kotlin:kotlin-stdlib'
            implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"


            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"

            implementation "io.ktor:ktor-client-android:$ktor_version"

            // SQL Delight
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"

        }

        iosMain.dependencies {
            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core-native:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime-native:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-ios:$ktor_version"

            // SQL Delight
            implementation "com.squareup.sqldelight:ios-driver:$sqldelight_version"
        }

        jvmMain.dependencies {
            implementation kotlin('stdlib-js')

            implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$kotlin_version"

            // COROUTINE
            implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutine_version"

            // SERIALIZATION
            implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializer_version"

            // KTOR
            implementation "io.ktor:ktor-client-android:$ktor_version"

            // SQL Delight
            implementation "com.squareup.sqldelight:android-driver:$sqldelight_version"
            implementation "com.squareup.sqldelight:sqlite-driver:$sqldelight_version"
        }


        commonTest {
            dependencies {
                implementation kotlin('test-common')
                implementation kotlin('test-annotations-common')
                implementation "io.mockk:mockk:1.9.3"
            }
        }

        androidTest {
            dependencies {
                implementation kotlin('test')
                implementation kotlin('test-junit')
            }
        }

    }
}


task packForXCode {
    def buildType = project.findProperty("kotlin.build.type") ?: "DEBUG"
    dependsOn "link${buildType.toLowerCase().capitalize()}FrameworkIos"
    //dependsOn "linkMainDebugFrameworkIOS"

    doLast {
        def srcFile = kotlin.targets.ios.binaries.getFramework(buildType).outputFile
        def targetDir = getProperty("configuration.build.dir")
        copy {
            from srcFile.parent
            into targetDir
            include 'SharedCode.framework/**'
            include 'SharedCode .framework.dSYM'
        }
    }
}


sqldelight {
    Database {
        packageName = "com.jarroyo.sharedcode"
    }
}

// workaround for https://youtrack.jetbrains.com/issue/KT-27170
configurations {
    compileClasspath
}